{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Getting Started"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initialize the SparkSession"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyspark\n",
    "from pyspark.sql import SparkSession\n",
    "\n",
    "# Add other configuration options as needed\n",
    "spark = SparkSession.builder \\\n",
    "            .appName(\"Pyrasterframes\") \\\n",
    "            .master(\"local\") \\\n",
    "            .config(\"spark.executor.memory\", '8g') \\\n",
    "            .config('spark.executor.cores', '3') \\\n",
    "            .config(\"spark.driver.memory\",'8g') \\\n",
    "            .getOrCreate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enable RasterFrames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "            <div>\n",
       "                <p><b>SparkSession - in-memory</b></p>\n",
       "                \n",
       "        <div>\n",
       "            <p><b>SparkContext</b></p>\n",
       "\n",
       "            <p><a href=\"http://172.18.0.2:4040\">Spark UI</a></p>\n",
       "\n",
       "            <dl>\n",
       "              <dt>Version</dt>\n",
       "                <dd><code>v2.2.0</code></dd>\n",
       "              <dt>Master</dt>\n",
       "                <dd><code>local</code></dd>\n",
       "              <dt>AppName</dt>\n",
       "                <dd><code>Pyrasterframes</code></dd>\n",
       "            </dl>\n",
       "        </div>\n",
       "        \n",
       "            </div>\n",
       "        "
      ],
      "text/plain": [
       "<pyspark.sql.session.SparkSession at 0x7f5f00135da0>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pyrasterframes import *\n",
    "from pyrasterframes.rasterfunctions import *\n",
    "\n",
    "spark.withRasterFrames()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Play with Sample Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------+--------------------+--------------------+--------------------+\n",
      "|spatial_key|              bounds|            metadata|                tile|\n",
      "+-----------+--------------------+--------------------+--------------------+\n",
      "|      [0,0]|POLYGON ((703986....|Map(METADATATYPE ...|geotrellis.raster...|\n",
      "+-----------+--------------------+--------------------+--------------------+\n",
      "\n",
      "+-----------------+\n",
      "|   agg_mean(tile)|\n",
      "+-----------------+\n",
      "|7444.425440285704|\n",
      "+-----------------+\n",
      "\n",
      "+-----------+--------------------+--------------------+--------------------+-----------------+\n",
      "|spatial_key|              bounds|            metadata|                tile|             mean|\n",
      "+-----------+--------------------+--------------------+--------------------+-----------------+\n",
      "|      [0,0]|POLYGON ((703986....|Map(METADATATYPE ...|geotrellis.raster...|7444.425440285704|\n",
      "+-----------+--------------------+--------------------+--------------------+-----------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "rf = spark.read.geotiff('samples/L8-B4-Elkton-VA.tiff')\n",
    "rf.show()\n",
    "\n",
    "agg = rf.agg(aggMean('tile'))\n",
    "agg.show()\n",
    "\n",
    "tm = rf.withColumn('mean', tileMean('tile'))\n",
    "tm.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
