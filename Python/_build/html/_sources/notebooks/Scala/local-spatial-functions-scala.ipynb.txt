{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Local Spatial Functions\n",
    "\n",
    "Local spatial functions compute a variety of spatial information on a local, per tile basis, meaning that every tile is evaluated independently. `withCenter`, `withCenterLatLng`, `withBounds`, and `withSpatialIndex` all create a new column in the rasterframe titled `center`, `center`, `bounds`, and `spatial_index` respectively containing the results of the query."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import astraea.spark.rasterframes._\n",
    "import geotrellis.raster.io.geotiff.SinglebandGeoTiff\n",
    "import org.apache.spark.sql._\n",
    "import org.apache.spark.sql.functions._\n",
    "import geotrellis.spark.SpatialKey._\n",
    "import geotrellis.raster._\n",
    "import geotrellis.raster.mapalgebra.local._\n",
    "\n",
    "\n",
    "implicit val spark = SparkSession.builder().\n",
    "  master(\"local\").appName(\"RasterFrames\").\n",
    "  config(\"spark.ui.enabled\", \"false\").\n",
    "  getOrCreate().\n",
    "  withRasterFrames\n",
    "\n",
    "val sc = spark.sparkContext\n",
    "\n",
    "def readTiff(name: String): SinglebandGeoTiff = SinglebandGeoTiff(s\"../samples/$name\")\n",
    "val bandNumbers = 1 to 4\n",
    "val filenamePattern = \"L8-B%d-Elkton-VA.tiff\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "val joinedRF = bandNumbers.\n",
    "  map { b ⇒ (b, filenamePattern.format(b)) }.\n",
    "  map { case (b, f) ⇒ (b, readTiff(f)) }.\n",
    "  map { case (b, t) ⇒ t.projectedRaster.toRF(s\"band_$b\") }.\n",
    "  reduce(_ spatialJoin _)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`withCenter` creates a column containing the center of the tiles in the native CRS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------------------------------+\n",
      "|center                                 |\n",
      "+---------------------------------------+\n",
      "|POINT (706767.7980160001 4252076.74344)|\n",
      "+---------------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "joinedRF.withCenter().select(\"center\").show(false)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`withCenterLatLng` performs a similar function, but displays the centers in longitude, latitude form (EPSG:4326)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------------------------+\n",
      "|center                                |\n",
      "+--------------------------------------+\n",
      "|[-78.63240544923785,38.39301867116852]|\n",
      "+--------------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "joinedRF.withCenterLatLng().select(\"center\").show(false)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`withBounds` creates a column containing the polygonal bounds of the tile in the native CRS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
      "|bounds                                                                                                                                                   |\n",
      "+---------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
      "|POLYGON ((703986.502389 4249551.61978, 703986.502389 4254601.8671, 709549.093643 4254601.8671, 709549.093643 4249551.61978, 703986.502389 4249551.61978))|\n",
      "+---------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "joinedRF.withBounds().select(\"bounds\").show(false)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`withSpatialIndex` creates a spatial index column\n",
    "# What does this mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------+\n",
      "|spatial_index      |\n",
      "+-------------------+\n",
      "|2781571893406213788|\n",
      "+-------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "joinedRF.withSpatialIndex().select(\"spatial_index\").show(false)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "spylon-kernel",
   "language": "scala",
   "name": "spylon-kernel"
  },
  "language_info": {
   "codemirror_mode": "text/x-scala",
   "file_extension": ".scala",
   "help_links": [
    {
     "text": "MetaKernel Magics",
     "url": "https://github.com/calysto/metakernel/blob/master/metakernel/magics/README.md"
    }
   ],
   "mimetype": "text/x-scala",
   "name": "scala",
   "pygments_lexer": "scala",
   "version": "0.4.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
